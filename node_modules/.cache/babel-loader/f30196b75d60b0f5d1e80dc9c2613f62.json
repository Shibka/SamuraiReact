{"ast":null,"code":"let rerenderEntireTree = state => {\n  console.log('State Changed');\n};\n\nexport let store = {\n  _state: {\n    profile: {\n      posts: [{\n        id: 1,\n        message: 'Hello, how you doin?',\n        likesCount: 12\n      }, {\n        id: 2,\n        message: 'Hi, great, thanx',\n        likesCount: 10\n      }],\n      newPostText: ''\n    },\n    messagesPage: {\n      dialogs: [{\n        id: 1,\n        name: 'Alex'\n      }, {\n        id: 2,\n        name: 'Igor'\n      }, {\n        id: 3,\n        name: 'Leha'\n      }, {\n        id: 4,\n        name: 'Gleb'\n      }],\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'Hi Hi how are you?'\n      }, {\n        id: 3,\n        message: 'Hi Hi Hi'\n      }],\n      newMessage: ''\n    },\n    sidebar: {\n      friends: [{\n        id: 2,\n        name: 'Igor',\n        message: 'Hi'\n      }, {\n        id: 3,\n        name: 'Leha',\n        message: 'Hi'\n      }, {\n        id: 4,\n        name: 'Gleb',\n        message: 'Hi'\n      }]\n    }\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  addMessage(message) {\n    const newMessage = {\n      id: Math.random(),\n      message: message\n    };\n\n    this._state.messagesPage.messages.push(newMessage);\n\n    store.updateMessage('');\n\n    this._rerenderEntireTree(store);\n  },\n\n  updateMessage(message) {\n    this._state.messagesPage.newMessage = message;\n\n    this._rerenderEntireTree(store);\n  },\n\n  addPost(postMessage) {\n    const newPost = {\n      id: Math.random(),\n      message: postMessage,\n      likesCount: 3\n    };\n\n    this._state.profile.posts.push(newPost);\n\n    store.updatePostMessage('');\n\n    this._rerenderEntireTree(store);\n  },\n\n  updatePostMessage(newPostText) {\n    this._state.profile.newPostText = newPostText;\n\n    this._rerenderEntireTree(store);\n  },\n\n  subscribe(observer) {\n    this._rerenderEntireTree = observer;\n  },\n\n  _rerenderEntireTree(state) {\n    console.log('State Changed');\n  }\n\n}; // export let state: StateType = {\n//     profile: {\n//         posts: [\n//             {id: 1, message: 'Hello, how you doin?', likesCount: 12},\n//             {id: 2, message: 'Hi, great, thanx', likesCount: 10},\n//         ],\n//         newPostText: '',\n//     },\n//     messagesPage: {\n//         dialogs: [\n//             {id: 1, name: 'Alex'},\n//             {id: 2, name: 'Igor'},\n//             {id: 3, name: 'Leha'},\n//             {id: 4, name: 'Gleb'}\n//         ],\n//         messages: [\n//             {id: 1, message: 'Hi'},\n//             {id: 2, message: 'Hi Hi how are you?'},\n//             {id: 3, message: 'Hi Hi Hi'}\n//         ]\n//     },\n//     sidebar: {\n//         friends: [\n//             {id: 2, name: 'Igor', message: 'Hi'},\n//             {id: 3, name: 'Leha', message: 'Hi'},\n//             {id: 4, name: 'Gleb', message: 'Hi'}\n//         ]\n//     },\n//\n// }\n// export const addPost = (postMessage: string) => {\n//     const newPost = {id: Math.random(), message: postMessage, likesCount: 3};\n//     state.profile.posts.push(newPost);\n//     updatePostMessage('')\n//     rerenderEntireTree(state)\n// };\n// export const updatePostMessage = (newPostText: string) => {\n//     state.profile.newPostText = newPostText\n//     rerenderEntireTree(state)\n// };\n//\n// export const subscribe = (observer: (state:StateType) => void) => {\n//     rerenderEntireTree = observer\n// }","map":{"version":3,"sources":["/Users/alex/IT/SamuraiWebSite/src/redux/state.tsx"],"names":["rerenderEntireTree","state","console","log","store","_state","profile","posts","id","message","likesCount","newPostText","messagesPage","dialogs","name","messages","newMessage","sidebar","friends","getState","addMessage","Math","random","push","updateMessage","_rerenderEntireTree","addPost","postMessage","newPost","updatePostMessage","subscribe","observer"],"mappings":"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","sourcesContent":["let rerenderEntireTree = (state:StoreType) => {\n    console.log('State Changed')\n}\n\ntype ProfileStructureType = {\n    id: number;\n    message: string;\n    likesCount: number;\n};\ntype DialogsStructureType = {\n    id: number;\n    name: string;\n};\ntype MessagesStructureType = {\n    id: number;\n    message: string;\n};\ntype FriendsStructureType = {\n    id: number;\n    name: string;\n    message: string;\n};\nexport type StoreType = {\n    _state: {\n        profile: {\n            posts: ProfileStructureType[];\n            newPostText: string\n        };\n        messagesPage: {\n            dialogs: DialogsStructureType[];\n            messages: MessagesStructureType[];\n            newMessage: string\n        };\n        sidebar: {\n            friends: FriendsStructureType[];\n        };\n    }\n    getState: ()=>void\n    addPost: (postMessage: string) => void,\n    updatePostMessage: (newPostText: string) => void,\n    subscribe: (observer: () => void) => void\n    _rerenderEntireTree: (state:StoreType)=>void\n    addMessage: (message: string)  => void,\n    updateMessage: (message: string) => void,\n}\n\nexport let store: StoreType = {\n    _state: {\n        profile: {\n            posts: [\n                {id: 1, message: 'Hello, how you doin?', likesCount: 12},\n                {id: 2, message: 'Hi, great, thanx', likesCount: 10},\n            ],\n            newPostText: '',\n        },\n        messagesPage: {\n            dialogs: [\n                {id: 1, name: 'Alex'},\n                {id: 2, name: 'Igor'},\n                {id: 3, name: 'Leha'},\n                {id: 4, name: 'Gleb'}\n            ],\n            messages: [\n                {id: 1, message: 'Hi'},\n                {id: 2, message: 'Hi Hi how are you?'},\n                {id: 3, message: 'Hi Hi Hi'}\n            ],\n            newMessage: ''\n        },\n        sidebar: {\n            friends: [\n                {id: 2, name: 'Igor', message: 'Hi'},\n                {id: 3, name: 'Leha', message: 'Hi'},\n                {id: 4, name: 'Gleb', message: 'Hi'}\n            ]\n        },\n\n    },\n    getState(){\n      return this._state\n    },\n    addMessage (message: string) {\n        const  newMessage= {id: Math.random(), message: message};\n        this._state.messagesPage.messages.push(newMessage);\n        store.updateMessage('')\n        this._rerenderEntireTree(store)\n    },\n    updateMessage(message: string) {\n        this._state.messagesPage.newMessage = message\n        this._rerenderEntireTree(store)\n    },\n    addPost (postMessage: string) {\n        const newPost = {id: Math.random(), message: postMessage, likesCount: 3};\n        this._state.profile.posts.push(newPost);\n        store.updatePostMessage('')\n        this._rerenderEntireTree(store)\n    },\n    updatePostMessage(newPostText: string) {\n        this._state.profile.newPostText = newPostText\n        this._rerenderEntireTree(store)\n    },\n   subscribe(observer: () => void) {\n        this._rerenderEntireTree = observer\n    },\n    _rerenderEntireTree (state:StoreType){\n        console.log('State Changed')\n    }\n}\n// export let state: StateType = {\n//     profile: {\n//         posts: [\n//             {id: 1, message: 'Hello, how you doin?', likesCount: 12},\n//             {id: 2, message: 'Hi, great, thanx', likesCount: 10},\n//         ],\n//         newPostText: '',\n//     },\n//     messagesPage: {\n//         dialogs: [\n//             {id: 1, name: 'Alex'},\n//             {id: 2, name: 'Igor'},\n//             {id: 3, name: 'Leha'},\n//             {id: 4, name: 'Gleb'}\n//         ],\n//         messages: [\n//             {id: 1, message: 'Hi'},\n//             {id: 2, message: 'Hi Hi how are you?'},\n//             {id: 3, message: 'Hi Hi Hi'}\n//         ]\n//     },\n//     sidebar: {\n//         friends: [\n//             {id: 2, name: 'Igor', message: 'Hi'},\n//             {id: 3, name: 'Leha', message: 'Hi'},\n//             {id: 4, name: 'Gleb', message: 'Hi'}\n//         ]\n//     },\n//\n// }\n\n\n// export const addPost = (postMessage: string) => {\n//     const newPost = {id: Math.random(), message: postMessage, likesCount: 3};\n//     state.profile.posts.push(newPost);\n//     updatePostMessage('')\n//     rerenderEntireTree(state)\n// };\n// export const updatePostMessage = (newPostText: string) => {\n//     state.profile.newPostText = newPostText\n//     rerenderEntireTree(state)\n// };\n//\n// export const subscribe = (observer: (state:StateType) => void) => {\n//     rerenderEntireTree = observer\n// }"]},"metadata":{},"sourceType":"module"}