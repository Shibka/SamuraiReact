{"ast":null,"code":"export let store = {\n  _state: {\n    profile: {\n      posts: [{\n        id: 1,\n        message: 'Hello, how you doin?',\n        likesCount: 12\n      }, {\n        id: 2,\n        message: 'Hi, great, thanx',\n        likesCount: 10\n      }],\n      newPostText: ''\n    },\n    messagesPage: {\n      dialogs: [{\n        id: 1,\n        name: 'Alex'\n      }, {\n        id: 2,\n        name: 'Igor'\n      }, {\n        id: 3,\n        name: 'Leha'\n      }, {\n        id: 4,\n        name: 'Gleb'\n      }],\n      messages: [{\n        id: 1,\n        message: 'Hi'\n      }, {\n        id: 2,\n        message: 'Hi Hi how are you?'\n      }, {\n        id: 3,\n        message: 'Hi Hi Hi'\n      }],\n      newMessage: ''\n    },\n    sidebar: {\n      friends: [{\n        id: 2,\n        name: 'Igor',\n        message: 'Hi'\n      }, {\n        id: 3,\n        name: 'Leha',\n        message: 'Hi'\n      }, {\n        id: 4,\n        name: 'Gleb',\n        message: 'Hi'\n      }]\n    }\n  },\n\n  getState() {\n    return this._state;\n  },\n\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  },\n\n  //\n  // addMessage(message: string) {\n  //     const newMessage = {id: Math.random(), message: message};\n  //     this._state.messagesPage.messages.unshift(newMessage);\n  //     store.updateMessage('')\n  //     this._callSubscriber(store)\n  // },\n  // updateMessage(message: string) {\n  //     this._state.messagesPage.newMessage = message\n  //     this._callSubscriber(store)\n  // },\n  // addPost(postMessage: string) {\n  //     const newPost = {id: Math.random(), message: postMessage, likesCount: 3};\n  //     this._state.profile.posts.unshift(newPost);\n  //     store.updatePostMessage('')\n  //     this._callSubscriber(store)\n  // },\n  // updatePostMessage(newPostText: string) {\n  //     this._state.profile.newPostText = newPostText\n  //     this._callSubscriber(store)\n  // },\n  _callSubscriber() {\n    console.log('State Changed');\n  },\n\n  dispatch(action) {\n    // if (action.type === 'ADD-POST') {\n    //     this._addPost(action.postMessage)\n    // }else if(action.type === 'UPDATE-POST-MESSAGE'){\n    //     this._updatePostMessage(action.newPostText)\n    // }\n    if (action.type === 'ADD-POST') {\n      debugger;\n      const newPost = {\n        id: Math.random(),\n        message: action.postMessage,\n        likesCount: 3\n      };\n\n      this._state.profile.posts.unshift(newPost);\n\n      this._state.profile.newPostText = '';\n\n      this._callSubscriber(store);\n    } else if (action.type === 'UPDATE-POST-MESSAGE') {\n      debugger;\n      this._state.profile.newPostText = action.newPostText;\n\n      this._callSubscriber(store);\n    } else if (action.type === 'ADD-MESSAGE') {\n      const newMessage = {\n        id: Math.random(),\n        message: action.message\n      };\n\n      this._state.messagesPage.messages.unshift(newMessage);\n\n      this._state.messagesPage.newMessage = '';\n\n      this._callSubscriber(store);\n    } else if (action.type === 'UPDATE-MESSAGE') {\n      this._state.messagesPage.newMessage = action.message;\n\n      this._callSubscriber(store);\n    }\n  }\n\n};\nexport const addPostAC = postMessage => {\n  return {\n    type: 'ADD-POST',\n    postMessage: postMessage\n  };\n};\nexport const updatePostMessageAC = newPostText => {\n  return {\n    type: 'UPDATE-POST-MESSAGE',\n    newPostText: newPostText\n  };\n};\nexport const addMessageAC = message => {\n  return {\n    type: 'ADD-MESSAGE',\n    message\n  };\n};\nexport const updateMessageAC = message => {\n  return {\n    type: 'UPDATE-MESSAGE',\n    message\n  };\n};","map":{"version":3,"sources":["/Users/alex/IT/SamuraiWebSite/src/redux/state.tsx"],"names":["store","_state","profile","posts","id","message","likesCount","newPostText","messagesPage","dialogs","name","messages","newMessage","sidebar","friends","getState","subscribe","observer","_callSubscriber","console","log","dispatch","action","type","newPost","Math","random","postMessage","unshift","addPostAC","updatePostMessageAC","addMessageAC","updateMessageAC"],"mappings":"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","sourcesContent":["import {message} from \"antd\";\n\ntype ProfileStructureType = {\n    id: number;\n    message: string;\n    likesCount: number;\n};\ntype DialogsStructureType = {\n    id: number;\n    name: string;\n};\ntype MessagesStructureType = {\n    id: number;\n    message: string;\n};\ntype FriendsStructureType = {\n    id: number;\n    name: string;\n    message: string;\n};\nexport type RootStateType = {\n    profile: {\n        posts: ProfileStructureType[];\n        newPostText: string,\n    }\n    messagesPage: {\n        dialogs: DialogsStructureType[]\n        messages: MessagesStructureType[]\n        newMessage: string\n    },\n    sidebar: {\n        friends: FriendsStructureType[]\n    },\n}\nexport type StoreType = {\n    _state: RootStateType\n    getState: () => RootStateType\n    // addPost: (postMessage: string) => void,\n    // updatePostMessage: (newPostText: string) => void,\n\n    subscribe: (observer: () => void) => void\n    _callSubscriber: (state: StoreType) => void\n    // addMessage: (message: string) => void,\n    // updateMessage: (message: string) => void,\n    dispatch: (action: ActionTypes) => void\n}\nexport type ActionTypes = AddPostActionType\n    | UpdatePostMessageActionType\n    | AddMessageActionType\n    | UpdateMessageActionType\n\ntype AddPostActionType = ReturnType<typeof addPostAC>\ntype UpdatePostMessageActionType = ReturnType<typeof updatePostMessageAC>\ntype AddMessageActionType = ReturnType<typeof addMessageAC>\ntype UpdateMessageActionType = ReturnType<typeof updateMessageAC>\nexport let store: StoreType = {\n    _state: {\n        profile: {\n            posts: [\n                {id: 1, message: 'Hello, how you doin?', likesCount: 12},\n                {id: 2, message: 'Hi, great, thanx', likesCount: 10},\n            ],\n            newPostText: '',\n        },\n        messagesPage: {\n            dialogs: [\n                {id: 1, name: 'Alex'},\n                {id: 2, name: 'Igor'},\n                {id: 3, name: 'Leha'},\n                {id: 4, name: 'Gleb'}\n            ],\n            messages: [\n                {id: 1, message: 'Hi'},\n                {id: 2, message: 'Hi Hi how are you?'},\n                {id: 3, message: 'Hi Hi Hi'}\n            ],\n            newMessage: ''\n        },\n        sidebar: {\n            friends: [\n                {id: 2, name: 'Igor', message: 'Hi'},\n                {id: 3, name: 'Leha', message: 'Hi'},\n                {id: 4, name: 'Gleb', message: 'Hi'}\n            ]\n        },\n\n    },\n    getState() {\n        return this._state\n    },\n    subscribe(observer: () => void) {\n        this._callSubscriber = observer\n    },\n    //\n    // addMessage(message: string) {\n    //     const newMessage = {id: Math.random(), message: message};\n    //     this._state.messagesPage.messages.unshift(newMessage);\n    //     store.updateMessage('')\n    //     this._callSubscriber(store)\n    // },\n    // updateMessage(message: string) {\n    //     this._state.messagesPage.newMessage = message\n    //     this._callSubscriber(store)\n    // },\n    // addPost(postMessage: string) {\n    //     const newPost = {id: Math.random(), message: postMessage, likesCount: 3};\n    //     this._state.profile.posts.unshift(newPost);\n    //     store.updatePostMessage('')\n    //     this._callSubscriber(store)\n    // },\n    // updatePostMessage(newPostText: string) {\n    //     this._state.profile.newPostText = newPostText\n    //     this._callSubscriber(store)\n    // },\n    _callSubscriber(/*state:StoreType*/) {\n        console.log('State Changed')\n    },\n    dispatch(action) {\n        // if (action.type === 'ADD-POST') {\n        //     this._addPost(action.postMessage)\n        // }else if(action.type === 'UPDATE-POST-MESSAGE'){\n        //     this._updatePostMessage(action.newPostText)\n        // }\n        if (action.type === 'ADD-POST') {\n            debugger\n            const newPost = {id: Math.random(), message: action.postMessage, likesCount: 3};\n            this._state.profile.posts.unshift(newPost);\n            this._state.profile.newPostText = ''\n            this._callSubscriber(store)\n        } else if (action.type === 'UPDATE-POST-MESSAGE') {\n            debugger\n            this._state.profile.newPostText = action.newPostText\n            this._callSubscriber(store)\n        } else if (action.type === 'ADD-MESSAGE') {\n            const newMessage = {id: Math.random(), message: action.message};\n            this._state.messagesPage.messages.unshift(newMessage);\n            this._state.messagesPage.newMessage = ''\n            this._callSubscriber(store)\n        } else if (action.type === 'UPDATE-MESSAGE') {\n            this._state.messagesPage.newMessage = action.message\n            this._callSubscriber(store)\n        }\n    }\n}\nexport const addPostAC = (postMessage: string) => {\n    return {type: 'ADD-POST', postMessage: postMessage} as const\n}\nexport const updatePostMessageAC = (newPostText: string) => {\n    return {type: 'UPDATE-POST-MESSAGE', newPostText: newPostText} as const\n}\nexport const addMessageAC = (message: string) => {\n    return {type: 'ADD-MESSAGE', message} as const\n}\nexport const updateMessageAC = (message: string) => {\n    return {type: 'UPDATE-MESSAGE', message} as const\n}\n"]},"metadata":{},"sourceType":"module"}