{"ast":null,"code":"var _jsxFileName = \"/Users/alex/IT/SamuraiWebSite/src/index.tsx\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./redux/state\"; // type ProfileStructureType = {\n//     id: number;\n//     message: string;\n//     likesCount: number;\n// };\n// type DialogsStructureType = {\n//     id: number;\n//     name: string;\n// };\n// type MessagesStructureType = {\n//     id: number;\n//     message: string;\n// };\n// type FriendsStructureType = {\n//     id: number;\n//     name: string;\n//     message: string;\n// };\n// type renderPropsType = {\n//     state: {\n//         profile: {\n//             posts: ProfileStructureType[];\n//             newPostText: string\n//         };\n//         messagesPage: {\n//             dialogs: DialogsStructureType[];\n//             messages: MessagesStructureType[];\n//         };\n//         sidebar: {\n//             friends: FriendsStructureType[];\n//         };\n//     };\n//     addPost: (postMessage: string) => void;\n//     updatePostMessage: (newPostText: string) => void\n//     subscribe: (observer: () => void) => void\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const rerenderEntireTree = () => {\n  //пропсы можно и не передавать и сделать все с пустой функцией !!!!\n  ReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {\n      store: store // addPost={store.addPost}\n      // posts={store.state.profile.posts}\n      // messages={store.state.messagesPage.messages}\n      // dialogs={store.state.messagesPage.dialogs}\n      // newPostMessage={store.state.profile.newPostText}\n      // updatePostMessage={store.updatePostMessage}\n\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this), document.getElementById(\"root\"));\n};\nrerenderEntireTree(); // тут может быть пусто как и все функции в state\n\nstore.subscribe(rerenderEntireTree);","map":{"version":3,"sources":["/Users/alex/IT/SamuraiWebSite/src/index.tsx"],"names":["React","ReactDOM","App","store","rerenderEntireTree","render","document","getElementById","subscribe"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAAQC,KAAR,QAA+B,eAA/B,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,MAAMC,kBAAkB,GAAG,MAAyB;AAAE;AAEzDH,EAAAA,QAAQ,CAACI,MAAT,eACI,QAAC,KAAD,CAAO,UAAP;AAAA,2BACI,QAAC,GAAD;AACI,MAAA,KAAK,EAAEF,KADX,CAEI;AACA;AACA;AACA;AACA;AACA;;AAPJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ,EAYIG,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAZJ;AAcH,CAhBM;AAiBPH,kBAAkB,G,CAAG;;AACrBD,KAAK,CAACK,SAAN,CAAgBJ,kBAAhB","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {store, StoreType} from \"./redux/state\";\n\n// type ProfileStructureType = {\n//     id: number;\n//     message: string;\n//     likesCount: number;\n// };\n// type DialogsStructureType = {\n//     id: number;\n//     name: string;\n// };\n// type MessagesStructureType = {\n//     id: number;\n//     message: string;\n// };\n// type FriendsStructureType = {\n//     id: number;\n//     name: string;\n//     message: string;\n// };\n// type renderPropsType = {\n//     state: {\n//         profile: {\n//             posts: ProfileStructureType[];\n//             newPostText: string\n//         };\n//         messagesPage: {\n//             dialogs: DialogsStructureType[];\n//             messages: MessagesStructureType[];\n//         };\n//         sidebar: {\n//             friends: FriendsStructureType[];\n//         };\n//     };\n//     addPost: (postMessage: string) => void;\n//     updatePostMessage: (newPostText: string) => void\n//     subscribe: (observer: () => void) => void\n// };\n\nexport const rerenderEntireTree = (/*props:StoreType*/) => { //пропсы можно и не передавать и сделать все с пустой функцией !!!!\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <App\n                store={store}\n                // addPost={store.addPost}\n                // posts={store.state.profile.posts}\n                // messages={store.state.messagesPage.messages}\n                // dialogs={store.state.messagesPage.dialogs}\n                // newPostMessage={store.state.profile.newPostText}\n                // updatePostMessage={store.updatePostMessage}\n            />\n        </React.StrictMode>,\n        document.getElementById(\"root\")\n    );\n};\nrerenderEntireTree() // тут может быть пусто как и все функции в state\nstore.subscribe(rerenderEntireTree)\n"]},"metadata":{},"sourceType":"module"}